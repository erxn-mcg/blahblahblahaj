from movr.models import Vehicle, Ride, User
import datetime
import uuid


def start_ride_txn(session, city, rider_id, vehicle_id):
    """
    Insert a new row into the rides table and update a row of the vehicles table.

    Arguments:
        session {.Session} -- The active session for the database connection.
        city {String} -- The vehicle's city.
        rider_id {UUID} -- The user's unique ID.
        rider_city {String} -- The city in which the rider is registered.
        vehicle_id {UUID} -- The vehicle's unique ID.
    """
    v = session.query(Vehicle).filter(Vehicle.id == vehicle_id).first()
    r = Ride(
        city=city,
        id=str(
            uuid.uuid4()),
        rider_id=rider_id,
        vehicle_id=vehicle_id,
        start_location=v.last_location,
        start_time=datetime.datetime.now(
            datetime.timezone.utc))

    session.add(r)
    v.status = "unavailable"


def end_ride_txn(session, ride_id, location):
    """
    Update a row of the rides table, and update a row of the vehicles table.

    Arguments:
        session {.Session} -- The active session for the database connection.
        ride_id {UUID} -- The ride's unique ID.
        location {String} -- The vehicle's last location.
    """
    r = session.query(Ride).filter(Ride.id == ride_id).first()
    v = session.query(Vehicle).filter(Vehicle.id == r.vehicle_id).first()
    r.end_location = location
    r.end_time = datetime.datetime.now(datetime.timezone.utc)
    r.length = r.end_time - r.start_time
    v.last_location = location
    v.status = "available"


def add_user_txn(
        session,
        city,
        first_name,
        last_name,
        email,
        username,
        password,
        password_hash=None,
        is_owner=False):
    """
    Insert a new row into the users table. The password passed to the function is not stored. Instead, the `set_password` method hashes the string and stores the hash.

    Arguments:
        session {.Session} -- The active session for the database connection.
        city {String} -- The user's city.
        first_name {String} -- The user's first name.
        last_name {String} -- The user's last name.
        email {String} -- The user's email.
        username {String} -- The user's username.
        password {String} -- The user's unhashed password.

    Keyword Arguments:
        password_hash {String} -- A hash of the password. This is generated by a password hasher. (default: {None})
        is_owner {bool} -- True if the user is a vehicle owner. (default: {False})
    """
    u = User(city=city,
             id=str(uuid.uuid4()),
             first_name=first_name,
             last_name=last_name,
             email=email,
             username=username,
             is_owner=is_owner)
    u.set_password(password)
    session.add(u)


def remove_user_txn(session, id):
    """
    Update a row in the users table. This function does not delete a row.

    Arguments:
        session {.Session} -- The active session for the database connection.
        id {UUID} -- The user's unique ID.
    """
    u = session.query(User).filter(User.id == id).first()
    u.username = None


def add_vehicle_txn(
        session,
        city,
        owner_id,
        last_location,
        type,
        color,
        brand,
        status,
        is_owner):
    """
    Insert a row into the vehicles table, and update a row in the users table.

    Arguments:
        session {.Session} -- The active session for the database connection.
        city {String} -- The vehicle's city.
        owner_id {UUID} -- The owner's unique ID.
        last_location {String} -- The vehicle's location.
        type {String} -- The vehicle's type.
        color {String} -- The vehicle's color.
        brand {String} -- The vehicle's brand.
        status {String} -- The vehicle's availability.
        is_owner {bool} -- The owner status of the user, before the vehicle is added.
    """
    vehicle_type = type
    v = Vehicle(
        id=str(
            uuid.uuid4()),
        type=vehicle_type,
        city=city,
        owner_id=owner_id,
        last_location=last_location,
        color=color,
        brand=brand,
        status=status)
    session.add(v)
    if not is_owner:
        u = session.query(User).filter(User.id == v.owner_id).first()
        u.is_owner = True


def remove_vehicle_txn(session, id):
    """
    Update a row of the vehicles table. This function does not delete a row.

    Arguments:
        session {.Session} -- The active session for the database connection.
        id {UUID} -- The vehicle's unique ID.
    """
    v = session.query(Vehicle).filter(Vehicle.id == id).first()
    v.status = 'removed'
    owner = v.owner_id
    vehicles = session.query(Vehicle).filter(
        Vehicle.owner_id == owner, Vehicle.status != 'removed').all()
    if not vehicles:
        u = session.query(User).filter(User.id == owner).first()
        u.is_owner = False


def get_users_txn(session, city):
    """
    Select rows of the users table in a particular city.

    Arguments:
        session {.Session} -- The active session for the database connection.
        city {String} -- The users' city.

    Returns:
        List -- A list of dictionaries containing user information.
    """
    users = session.query(User).filter(
        User.city == city, User.username is not None).all()
    return list(map(lambda user: {'city': user.city,
                                  'id': user.id,
                                  'name': user.username,
                                  'first_name': user.first_name,
                                  'last_name': user.last_name,
                                  'is_owner': user.is_owner},
                    users))


def get_user_txn(session, username=None, user_id=None):
    """
    Select a row of the users table, and return the row as a User object.

    Arguments:
        session {.Session} -- The active session for the database connection.

    Keyword Arguments:
        username {String} -- The user's username. (default: {None})
        user_id {UUID} -- The user's unique ID. (default: {None})

    Returns:
        User -- A User object.
    """
    if username:
        u = session.query(User).filter(User.username == username).first()
    elif user_id:
        u = session.query(User).filter(User.id == user_id).first()
    if u:
        session.expunge(u)
    return u


def get_vehicles_txn(session, city):
    """
    Select the rows of the vehicles table for a specific city.

    Arguments:
        session {.Session} -- The active session for the database connection.
        city {String} -- The vehicle's city.

    Returns:
        List -- A list of dictionaries containing vehicle information.
    """
    vehicles = session.query(Vehicle).filter(
        Vehicle.city == city, Vehicle.status != 'removed').all()
    return list(
        map(
            lambda vehicle: {
                'city': vehicle.city,
                'id': vehicle.id,
                'owner_id': vehicle.owner_id,
                'type': vehicle.type,
                'last_location': vehicle.last_location + ', ' + vehicle.city,
                'status': vehicle.status,
                'date_added': vehicle.date_added,
                'color': vehicle.color,
                'brand': vehicle.brand},
            vehicles))


def get_rides_txn(session, rider_id):
    """
    Select the rows of the rides table for a specific user.

    Arguments:
        session {.Session} -- The active session for the database connection.
        rider_id {UUID} -- The user's unique ID.

    Returns:
        List -- A list of dictionaries containing ride information.
    """
    rides = session.query(Ride).filter(
        Ride.rider_id == rider_id).order_by(Ride.start_time).all()
    return list(map(lambda ride: {'city': ride.city,
                                  'id': ride.id,
                                  'vehicle_id': ride.vehicle_id,
                                  'start_time': ride.start_time,
                                  'end_time': ride.end_time,
                                  'rider_id': ride.rider_id,
                                  'length': ride.length},
                    rides))
